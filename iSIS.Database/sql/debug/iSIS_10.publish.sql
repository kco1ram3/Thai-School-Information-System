/*
Deployment script for iSIS

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "iSIS"
:setvar DefaultFilePrefix "iSIS"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL11.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL11.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
 Pre-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.	
 Use SQLCMD syntax to include a file in the pre-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the pre-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
GO

GO
/*
The column [dbo].[Admission].[RegistrationDate] is being dropped, data loss could occur.
*/

IF EXISTS (select top 1 1 from [dbo].[Admission])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
/*
The column [dbo].[Configuration].[ParentCategoryID] is being dropped, data loss could occur.

The column [dbo].[Configuration].[PersonRelationshipCategoryRootID] is being dropped, data loss could occur.

The column [dbo].[Configuration].[EffectiveFrom] on table [dbo].[Configuration] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.

The type for column DefaultLanguageCode in table [dbo].[Configuration] is currently  NVARCHAR (30) NULL but is being changed to  NCHAR (5) NULL. Data loss could occur.
*/

IF EXISTS (select top 1 1 from [dbo].[Configuration])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
/*
The column [dbo].[Curriculum].[SchoolID] is being dropped, data loss could occur.
*/

IF EXISTS (select top 1 1 from [dbo].[Curriculum])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
/*
The type for column ID in table [dbo].[DesiredOutcome] is currently  BIGINT IDENTITY (1, 1) NOT NULL but is being changed to  INT IDENTITY (1, 1) NOT NULL. Data loss could occur.

The type for column ParentID in table [dbo].[DesiredOutcome] is currently  BIGINT NULL but is being changed to  INT NULL. Data loss could occur.
*/

IF EXISTS (select top 1 1 from [dbo].[DesiredOutcome])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
/*
The type for column ID in table [dbo].[GradingSystem] is currently  BIGINT IDENTITY (1, 1) NOT NULL but is being changed to  INT IDENTITY (1, 1) NOT NULL. Data loss could occur.
*/

IF EXISTS (select top 1 1 from [dbo].[GradingSystem])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
/*
The column [dbo].[Teacher].[Date] is being dropped, data loss could occur.

The column [dbo].[Teacher].[ReceiptNo] is being dropped, data loss could occur.
*/

IF EXISTS (select top 1 1 from [dbo].[Teacher])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
PRINT N'The following operation was generated from a refactoring log file 8656c0f3-b7d3-4a59-835a-63fb56333ec5';

PRINT N'Rename [dbo].[Teacher].[EffectiveFrom] to Date';


GO
EXECUTE sp_rename @objname = N'[dbo].[Teacher].[EffectiveFrom]', @newname = N'Date', @objtype = N'COLUMN';


GO
PRINT N'The following operation was generated from a refactoring log file 1cb7f502-6c7e-4320-947e-b971d60c0e7b';

PRINT N'Rename [dbo].[Teacher].[EffectiveTo] to ReceiptNo';


GO
EXECUTE sp_rename @objname = N'[dbo].[Teacher].[EffectiveTo]', @newname = N'ReceiptNo', @objtype = N'COLUMN';


GO
PRINT N'Rename refactoring operation with key 5e482b0f-192d-41fb-beca-7e7ef613091b is skipped, element [dbo].[Receipt].[A] (SqlSimpleColumn) will not be renamed to AmountPerUnit';


GO
PRINT N'Rename refactoring operation with key f4e2e437-f021-4327-a5df-0cc523403af9, 44c22e2e-791e-4091-8b78-e624c28cfd7f is skipped, element [dbo].[ReceivableItem].[T] (SqlSimpleColumn) will not be renamed to EffectiveTo';


GO
PRINT N'Rename refactoring operation with key 6c92e556-8130-4ce0-b9db-96a6ec385eb3 is skipped, element [dbo].[ReceivableItem].[From] (SqlSimpleColumn) will not be renamed to EffectiveFrom';


GO
PRINT N'Starting rebuilding table [dbo].[Admission]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Admission] (
    [ID]                            INT            IDENTITY (1, 1) NOT NULL,
    [AdmissionID]                   INT            NULL,
    [SeqNo]                         INT            NULL,
    [AdmittedClassLevelID]          INT            NULL,
    [ApplicationReceiptTemplateID]  BIGINT         NULL,
    [ApplicationFormURL]            NVARCHAR (200) NULL,
    [ApplicationInfoURL]            NVARCHAR (200) NULL,
    [ApplyFrom]                     DATETIME2 (7)  NULL,
    [ApplyTo]                       DATETIME2 (7)  NULL,
    [RegistrationFormURL]           NVARCHAR (200) NULL,
    [RegistrationReceiptTemplateID] BIGINT         NULL,
    [RegistrationInfoURL]           NVARCHAR (100) NULL,
    [RegisterFrom]                  DATETIME2 (7)  NULL,
    [RegisterTo]                    DATETIME2 (7)  NULL,
    [OrientationDate]               DATETIME2 (7)  NULL,
    [TestResultPublishDate]         DATETIME2 (7)  NULL,
    [SemesterID]                    INT            NULL,
    [SchoolID]                      INT            NULL,
    [DescriptionMLSID]              BIGINT         NULL,
    PRIMARY KEY CLUSTERED ([ID] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Admission])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Admission] ON;
        INSERT INTO [dbo].[tmp_ms_xx_Admission] ([ID], [AdmissionID], [SeqNo], [ApplyFrom], [ApplyTo], [OrientationDate], [TestResultPublishDate], [SemesterID], [SchoolID], [DescriptionMLSID])
        SELECT   [ID],
                 [AdmissionID],
                 [SeqNo],
                 [ApplyFrom],
                 [ApplyTo],
                 [OrientationDate],
                 [TestResultPublishDate],
                 [SemesterID],
                 [SchoolID],
                 [DescriptionMLSID]
        FROM     [dbo].[Admission]
        ORDER BY [ID] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Admission] OFF;
    END

DROP TABLE [dbo].[Admission];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Admission]', N'Admission';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[Configuration]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Configuration] (
    [ID]                                     INT           IDENTITY (1, 1) NOT NULL,
    [SystemID]                               INT           NOT NULL,
    [EffectiveFrom]                          DATETIME2 (7) NOT NULL,
    [EffectiveTo]                            DATETIME2 (7) NULL,
    [AcademicLevelRootID]                    INT           NULL,
    [BloodGroupRootID]                       INT           NULL,
    [CourseCategoryRootID]                   INT           NULL,
    [GenderRootID]                           INT           NULL,
    [MajorRootID]                            INT           NULL,
    [OccupationRootID]                       INT           NULL,
    [RaceRootID]                             INT           NULL,
    [RelativeCategoryID]                     INT           NULL,
    [ReligionRootID]                         INT           NULL,
    [StudentStatusRootID]                    INT           NULL,
    [SchoolPositionRootID]                   INT           NULL,
    [SchoolSupervisorCategoryRootID]         INT           NULL,
    [DefaultCountryCode]                     NCHAR (3)     NULL,
    [DefaultDateCultureName]                 NVARCHAR (30) NULL,
    [DefaultDateFormat]                      NVARCHAR (50) NULL,
    [DefaultLanguageCode]                    NCHAR (5)     NULL,
    [CurriculumCourseCategoryRootID]         INT           NULL,
    [RoyalDecorationRootID]                  INT           NULL,
    [GuardianCategoryID]                     INT           NULL,
    [FatherCategoryID]                       INT           NULL,
    [MotherCategoryID]                       INT           NULL,
    [PersonPersonRelationshipCategoryRootID] INT           NULL,
    [EducationLevelRootID]                   INT           NULL,
    PRIMARY KEY CLUSTERED ([ID] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Configuration])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Configuration] ON;
        INSERT INTO [dbo].[tmp_ms_xx_Configuration] ([ID], [SystemID], [AcademicLevelRootID], [BloodGroupRootID], [GenderRootID], [MajorRootID], [OccupationRootID], [RaceRootID], [ReligionRootID], [StudentStatusRootID], [RelativeCategoryID], [DefaultDateCultureName], [DefaultDateFormat], [DefaultLanguageCode], [CurriculumCourseCategoryRootID], [RoyalDecorationRootID], [GuardianCategoryID], [FatherCategoryID], [MotherCategoryID], [PersonPersonRelationshipCategoryRootID], [EducationLevelRootID], [DefaultCountryCode], [SchoolSupervisorCategoryRootID], [CourseCategoryRootID])
        SELECT   [ID],
                 [SystemID],
                 [AcademicLevelRootID],
                 [BloodGroupRootID],
                 [GenderRootID],
                 [MajorRootID],
                 [OccupationRootID],
                 [RaceRootID],
                 [ReligionRootID],
                 [StudentStatusRootID],
                 [RelativeCategoryID],
                 [DefaultDateCultureName],
                 [DefaultDateFormat],
                 [DefaultLanguageCode],
                 [CurriculumCourseCategoryRootID],
                 [RoyalDecorationRootID],
                 [GuardianCategoryID],
                 [FatherCategoryID],
                 [MotherCategoryID],
                 [PersonPersonRelationshipCategoryRootID],
                 [EducationLevelRootID],
                 [DefaultCountryCode],
                 [SchoolSupervisorCategoryRootID],
                 [CourseCategoryRootID]
        FROM     [dbo].[Configuration]
        ORDER BY [ID] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Configuration] OFF;
    END

DROP TABLE [dbo].[Configuration];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Configuration]', N'Configuration';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[Country]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Country] (
    [Alpha3Code] NCHAR (3) NOT NULL,
    [Code]       NCHAR (3) NULL,
    [Alpha2Code] NCHAR (2) NULL,
    [TitleMLSID] BIGINT    NULL,
    PRIMARY KEY CLUSTERED ([Alpha3Code] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Country])
    BEGIN
        
        INSERT INTO [dbo].[tmp_ms_xx_Country] ([Alpha3Code], [Code], [Alpha2Code], [TitleMLSID])
        SELECT   [Alpha3Code],
                 [Code],
                 [Alpha2Code],
                 [TitleMLSID]
        FROM     [dbo].[Country]
        ORDER BY [Alpha3Code] ASC;
        
    END

DROP TABLE [dbo].[Country];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Country]', N'Country';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating [dbo].[Country].[Country_UIX_Alpha2]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [Country_UIX_Alpha2]
    ON [dbo].[Country]([Alpha2Code] ASC)
    ON [PRIMARY];


GO
PRINT N'Starting rebuilding table [dbo].[Curriculum]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Curriculum] (
    [ID]                    INT            IDENTITY (1, 1) NOT NULL,
    [EffectiveFrom]         DATETIME2 (7)  NULL,
    [EffectiveTo]           DATETIME2 (7)  NULL,
    [CurriculumFrameworkID] INT            NULL,
    [ShortTitleMLSID]       BIGINT         NULL,
    [TitleMLSID]            BIGINT         NULL,
    [Reference]             NVARCHAR (200) NULL,
    [Remark]                NVARCHAR (400) NULL,
    PRIMARY KEY CLUSTERED ([ID] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Curriculum])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Curriculum] ON;
        INSERT INTO [dbo].[tmp_ms_xx_Curriculum] ([ID], [EffectiveFrom], [EffectiveTo], [ShortTitleMLSID], [TitleMLSID], [Reference], [Remark], [CurriculumFrameworkID])
        SELECT   [ID],
                 [EffectiveFrom],
                 [EffectiveTo],
                 [ShortTitleMLSID],
                 [TitleMLSID],
                 [Reference],
                 [Remark],
                 [CurriculumFrameworkID]
        FROM     [dbo].[Curriculum]
        ORDER BY [ID] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Curriculum] OFF;
    END

DROP TABLE [dbo].[Curriculum];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Curriculum]', N'Curriculum';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[CurriculumFramework]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_CurriculumFramework] (
    [ID]              INT           IDENTITY (1, 1) NOT NULL,
    [Code]            NVARCHAR (40) NULL,
    [EffectiveFrom]   DATETIME2 (7) NULL,
    [EffectiveTo]     DATETIME2 (7) NULL,
    [ShortTitleMLSID] BIGINT        NULL,
    [TitleMLSID]      BIGINT        NULL,
    PRIMARY KEY CLUSTERED ([ID] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[CurriculumFramework])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_CurriculumFramework] ON;
        INSERT INTO [dbo].[tmp_ms_xx_CurriculumFramework] ([ID], [EffectiveFrom], [EffectiveTo], [ShortTitleMLSID], [TitleMLSID], [Code])
        SELECT   [ID],
                 [EffectiveFrom],
                 [EffectiveTo],
                 [ShortTitleMLSID],
                 [TitleMLSID],
                 [Code]
        FROM     [dbo].[CurriculumFramework]
        ORDER BY [ID] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_CurriculumFramework] OFF;
    END

DROP TABLE [dbo].[CurriculumFramework];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_CurriculumFramework]', N'CurriculumFramework';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[DesiredOutcome]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_DesiredOutcome] (
    [ID]                     INT            IDENTITY (1, 1) NOT NULL,
    [Discriminator]          TINYINT        NULL,
    [Code]                   NVARCHAR (30)  NULL,
    [CurriculumFrameworkID]  INT            NULL,
    [DefaultGradingSystemID] INT            NULL,
    [ParentID]               INT            NULL,
    [EffectiveFrom]          DATETIME2 (7)  NULL,
    [EffectiveTo]            DATETIME2 (7)  NULL,
    [Reference]              NVARCHAR (200) NULL,
    [Remark]                 NVARCHAR (400) NULL,
    [ClassLevelID]           BIGINT         NULL,
    [ShortTitleMLSID]        BIGINT         NULL,
    [TitleMLSID]             BIGINT         NULL,
    PRIMARY KEY CLUSTERED ([ID] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[DesiredOutcome])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_DesiredOutcome] ON;
        INSERT INTO [dbo].[tmp_ms_xx_DesiredOutcome] ([ID], [Discriminator], [Code], [CurriculumFrameworkID], [ParentID], [EffectiveFrom], [EffectiveTo], [Reference], [Remark], [ClassLevelID], [ShortTitleMLSID], [TitleMLSID], [DefaultGradingSystemID])
        SELECT   [ID],
                 [Discriminator],
                 [Code],
                 [CurriculumFrameworkID],
                 [ParentID],
                 [EffectiveFrom],
                 [EffectiveTo],
                 [Reference],
                 [Remark],
                 [ClassLevelID],
                 [ShortTitleMLSID],
                 [TitleMLSID],
                 [DefaultGradingSystemID]
        FROM     [dbo].[DesiredOutcome]
        ORDER BY [ID] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_DesiredOutcome] OFF;
    END

DROP TABLE [dbo].[DesiredOutcome];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_DesiredOutcome]', N'DesiredOutcome';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[GradingSystem]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_GradingSystem] (
    [ID]              INT            IDENTITY (1, 1) NOT NULL,
    [Discriminator]   TINYINT        NULL,
    [Code]            NVARCHAR (30)  NULL,
    [EffectiveFrom]   DATETIME2 (7)  NULL,
    [EffectiveTo]     DATETIME2 (7)  NULL,
    [Reference]       NVARCHAR (200) NULL,
    [Remark]          NVARCHAR (400) NULL,
    [ShortTitleMLSID] BIGINT         NULL,
    [TitleMLSID]      BIGINT         NULL,
    [MaxPoint]        REAL           NULL,
    [MinPoint]        REAL           NULL,
    PRIMARY KEY CLUSTERED ([ID] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[GradingSystem])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_GradingSystem] ON;
        INSERT INTO [dbo].[tmp_ms_xx_GradingSystem] ([ID], [Discriminator], [Code], [EffectiveFrom], [EffectiveTo], [Reference], [Remark], [ShortTitleMLSID], [TitleMLSID], [MaxPoint], [MinPoint])
        SELECT   [ID],
                 [Discriminator],
                 [Code],
                 [EffectiveFrom],
                 [EffectiveTo],
                 [Reference],
                 [Remark],
                 [ShortTitleMLSID],
                 [TitleMLSID],
                 [MaxPoint],
                 [MinPoint]
        FROM     [dbo].[GradingSystem]
        ORDER BY [ID] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_GradingSystem] OFF;
    END

DROP TABLE [dbo].[GradingSystem];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_GradingSystem]', N'GradingSystem';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[MLSValue]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_MLSValue] (
    [ID]           BIGINT          IDENTITY (1, 1) NOT NULL,
    [MLSID]        BIGINT          NULL,
    [LanguageCode] NCHAR (5)       NULL,
    [LanguageID]   INT             NULL,
    [Value]        NVARCHAR (4000) NULL,
    [UpdatedTS]    DATETIME2 (7)   NULL,
    PRIMARY KEY CLUSTERED ([ID] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[MLSValue])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_MLSValue] ON;
        INSERT INTO [dbo].[tmp_ms_xx_MLSValue] ([ID], [MLSID], [LanguageCode], [LanguageID], [Value], [UpdatedTS])
        SELECT   [ID],
                 [MLSID],
                 [LanguageCode],
                 [LanguageID],
                 [Value],
                 [UpdatedTS]
        FROM     [dbo].[MLSValue]
        ORDER BY [ID] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_MLSValue] OFF;
    END

DROP TABLE [dbo].[MLSValue];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_MLSValue]', N'MLSValue';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[StudentApplication]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_StudentApplication] (
    [ID]                  INT            IDENTITY (1, 1) NOT NULL,
    [Date]                DATETIME2 (7)  NULL,
    [AdmissionID]         INT            NULL,
    [AdmissionTestRoomID] INT            NULL,
    [Reference]           NVARCHAR (200) NULL,
    [Remark]              NVARCHAR (400) NULL,
    [IDNo]                NVARCHAR (20)  NULL,
    [AppliedCurriculumID] INT            NULL,
    [AppliedDate]         DATETIME2 (7)  NULL,
    [ApplicantID]         INT            NULL,
    [FatherID]            INT            NULL,
    [GuardianID]          INT            NULL,
    [MotherID]            INT            NULL,
    [StudentID]           INT            NULL,
    [LastSchoolID]        INT            NULL,
    [LastClassLevelID]    INT            NULL,
    [GPA]                 REAL           NULL,
    [ONETScore]           REAL           NULL,
    [TotalTestScore]      REAL           NULL,
    [Rank]                INT            NULL,
    [IsAdmitted]          BIT            NULL,
    PRIMARY KEY CLUSTERED ([ID] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[StudentApplication])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_StudentApplication] ON;
        INSERT INTO [dbo].[tmp_ms_xx_StudentApplication] ([ID], [Date], [Reference], [Remark], [IDNo], [AppliedCurriculumID], [AppliedDate], [ApplicantID], [FatherID], [GuardianID], [MotherID], [StudentID], [LastSchoolID], [LastClassLevelID], [GPA], [ONETScore], [TotalTestScore], [Rank], [IsAdmitted])
        SELECT   [ID],
                 [Date],
                 [Reference],
                 [Remark],
                 [IDNo],
                 [AppliedCurriculumID],
                 [AppliedDate],
                 [ApplicantID],
                 [FatherID],
                 [GuardianID],
                 [MotherID],
                 [StudentID],
                 [LastSchoolID],
                 [LastClassLevelID],
                 [GPA],
                 [ONETScore],
                 [TotalTestScore],
                 [Rank],
                 [IsAdmitted]
        FROM     [dbo].[StudentApplication]
        ORDER BY [ID] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_StudentApplication] OFF;
    END

DROP TABLE [dbo].[StudentApplication];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_StudentApplication]', N'StudentApplication';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[Teacher]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Teacher] (
    [ID]                INT            NOT NULL,
    [IDNo]              NVARCHAR (20)  NULL,
    [CategoryID]        INT            NULL,
    [PersonID]          INT            NULL,
    [SchoolID]          INT            NULL,
    [EffectiveFrom]     DATETIME2 (7)  NULL,
    [EffectiveTo]       DATETIME2 (7)  NULL,
    [Reference]         NVARCHAR (50)  NULL,
    [Remark]            NVARCHAR (500) NULL,
    [StartAcademicYear] INT            NULL,
    [StartSemesterID]   INT            NULL,
    [StartSemesterNo]   INT            NULL,
    [StatusID]          INT            NULL,
    PRIMARY KEY CLUSTERED ([ID] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Teacher])
    BEGIN
        
        INSERT INTO [dbo].[tmp_ms_xx_Teacher] ([ID], [IDNo], [CategoryID], [PersonID], [SchoolID], [Reference], [Remark], [StartAcademicYear], [StartSemesterID], [StartSemesterNo], [StatusID])
        SELECT   [ID],
                 [IDNo],
                 [CategoryID],
                 [PersonID],
                 [SchoolID],
                 [Reference],
                 [Remark],
                 [StartAcademicYear],
                 [StartSemesterID],
                 [StartSemesterNo],
                 [StatusID]
        FROM     [dbo].[Teacher]
        ORDER BY [ID] ASC;
        
    END

DROP TABLE [dbo].[Teacher];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Teacher]', N'Teacher';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[Language]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Language] (
    [LanguageCode]    NCHAR (5)       NOT NULL,
    [SeqNo]           INT             NULL,
    [ShortTitle]      NVARCHAR (20)   NULL,
    [SmallImageBytes] VARBINARY (MAX) NULL,
    [Title]           NVARCHAR (40)   NULL,
    PRIMARY KEY CLUSTERED ([LanguageCode] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Language])
    BEGIN
        
        INSERT INTO [dbo].[tmp_ms_xx_Language] ([LanguageCode], [SeqNo], [ShortTitle], [SmallImageBytes], [Title])
        SELECT   [LanguageCode],
                 [SeqNo],
                 [ShortTitle],
                 [SmallImageBytes],
                 [Title]
        FROM     [dbo].[Language]
        ORDER BY [LanguageCode] ASC;
        
    END

DROP TABLE [dbo].[Language];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Language]', N'Language';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[PerformanceIndicator]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_PerformanceIndicator] (
    [ID]                  INT           IDENTITY (1, 1) NOT NULL,
    [DescriptionMLSID]    BIGINT        NULL,
    [ClassLevelOutcomeID] BIGINT        NULL,
    [ClassLevelID]        BIGINT        NULL,
    [EffectiveFrom]       DATETIME2 (7) NULL,
    [EffectiveTo]         DATETIME2 (7) NULL,
    [SequenceNo]          INT           NULL,
    [Weight]              REAL          NULL,
    PRIMARY KEY CLUSTERED ([ID] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[PerformanceIndicator])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_PerformanceIndicator] ON;
        INSERT INTO [dbo].[tmp_ms_xx_PerformanceIndicator] ([ID], [DescriptionMLSID], [ClassLevelOutcomeID], [ClassLevelID], [EffectiveFrom], [EffectiveTo], [SequenceNo], [Weight])
        SELECT   [ID],
                 [DescriptionMLSID],
                 [ClassLevelOutcomeID],
                 [ClassLevelID],
                 [EffectiveFrom],
                 [EffectiveTo],
                 [SequenceNo],
                 [Weight]
        FROM     [dbo].[PerformanceIndicator]
        ORDER BY [ID] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_PerformanceIndicator] OFF;
    END

DROP TABLE [dbo].[PerformanceIndicator];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_PerformanceIndicator]', N'PerformanceIndicator';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating [dbo].[AdmissionTestRoom]...';


GO
CREATE TABLE [dbo].[AdmissionTestRoom] (
    [ID]                  INT NOT NULL,
    [AdmissionID]         INT NULL,
    [AdmissionTestRoomID] INT NULL,
    [Capacity]            INT NULL,
    PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[Receipt]...';


GO
CREATE TABLE [dbo].[Receipt] (
    [ID]           INT            IDENTITY (1, 1) NOT NULL,
    [Date]         DATETIME2 (7)  NULL,
    [ReceiptNo]    NVARCHAR (50)  NULL,
    [SemesterID]   INT            NULL,
    [PayerName]    NCHAR (50)     NULL,
    [PayerAddress] NVARCHAR (100) NULL,
    [SchoolID]     INT            NULL,
    [StudentID]    INT            NULL,
    [TotalAmount]  REAL           NULL,
    [Reference]    NVARCHAR (50)  NULL,
    [Remark]       NVARCHAR (50)  NULL,
    PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[ReceiptItem]...';


GO
CREATE TABLE [dbo].[ReceiptItem] (
    [ID]               INT  IDENTITY (1, 1) NOT NULL,
    [Amount]           REAL NULL,
    [AmountPerUnit]    REAL NULL,
    [Units]            INT  NULL,
    [ReceiptID]        INT  NULL,
    [ReceivableItemID] INT  NULL,
    [SeqNo]            INT  NULL,
    PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[ReceiptTemplate]...';


GO
CREATE TABLE [dbo].[ReceiptTemplate] (
    [ID]          BIGINT         IDENTITY (1, 1) NOT NULL,
    [SchoolID]    INT            NULL,
    [ReceiptNote] NVARCHAR (100) NULL,
    [TotalAmount] REAL           NULL,
    PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[ReceiptTemplateItem]...';


GO
CREATE TABLE [dbo].[ReceiptTemplateItem] (
    [ID]                   BIGINT IDENTITY (1, 1) NOT NULL,
    [SeqNo]                INT    NULL,
    [ReceiptTemplateID]    INT    NULL,
    [ReceivableItemID]     INT    NULL,
    [DefaultAmount]        REAL   NULL,
    [DefaultAmountPerUnit] REAL   NULL,
    [DefaultUnits]         INT    NULL,
    PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[ReceivableItem]...';


GO
CREATE TABLE [dbo].[ReceivableItem] (
    [ID]            INT           IDENTITY (1, 1) NOT NULL,
    [EffectiveFrom] DATETIME2 (7) NULL,
    [EffectiveTo]   DATETIME2 (7) NULL,
    [Reference]     NVARCHAR (50) NULL,
    [Remark]        NVARCHAR (50) NULL,
    [SeqNo]         INT           NULL,
    [SchoolID]      INT           NULL,
    [TitleMLSID]    BIGINT        NULL,
    [DefaultAmount] MONEY         NULL,
    PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[Register]...';


GO
CREATE TABLE [dbo].[Register] (
    [RegisterID]     INT           NOT NULL,
    [UserID]         INT           NOT NULL,
    [SemesterID]     INT           NOT NULL,
    [SchoolID]       INT           NOT NULL,
    [Subject_Amount] INT           NULL,
    [Create_Date]    DATETIME2 (7) NULL,
    [Update_Date]    DATETIME2 (7) NULL,
    PRIMARY KEY CLUSTERED ([RegisterID] ASC)
);


GO
PRINT N'Creating [dbo].[RegisterDetail]...';


GO
CREATE TABLE [dbo].[RegisterDetail] (
    [RegisterDetailID] INT            NOT NULL,
    [RegisterID]       INT            NOT NULL,
    [Curriculum]       INT            NOT NULL,
    [StudentID]        INT            NOT NULL,
    [TeacherID]        INT            NOT NULL,
    [Status]           NVARCHAR (50)  NULL,
    [Remark]           NVARCHAR (200) NULL,
    PRIMARY KEY CLUSTERED ([RegisterDetailID] ASC)
);


GO
PRINT N'Creating [dbo].[RegisterPayment]...';


GO
CREATE TABLE [dbo].[RegisterPayment] (
    [RegisterPaymentID] INT             NOT NULL,
    [RegisterDetailID]  INT             NOT NULL,
    [CourseID]          INT             NOT NULL,
    [UserID]            INT             NOT NULL,
    [Price]             DECIMAL (18, 2) NULL,
    [Unit]              INT             NULL,
    [Create_Date]       DATETIME2 (7)   NULL,
    [Update_Date]       DATETIME2 (7)   NULL,
    PRIMARY KEY CLUSTERED ([RegisterPaymentID] ASC)
);


GO
PRINT N'Creating [dbo].[SchoolAdministrator]...';


GO
CREATE TABLE [dbo].[SchoolAdministrator] (
    [ID]            INT            NOT NULL,
    [CategoryID]    INT            NULL,
    [PersonID]      INT            NULL,
    [SchoolID]      INT            NULL,
    [EffectiveFrom] DATETIME2 (7)  NULL,
    [EffectiveTo]   DATETIME2 (7)  NULL,
    [Reference]     NVARCHAR (50)  NULL,
    [Remark]        NVARCHAR (500) NULL,
    [StatusID]      INT            NULL,
    PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
-- Refactoring step to update target server with deployed transaction logs
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '8656c0f3-b7d3-4a59-835a-63fb56333ec5')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('8656c0f3-b7d3-4a59-835a-63fb56333ec5')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '1cb7f502-6c7e-4320-947e-b971d60c0e7b')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('1cb7f502-6c7e-4320-947e-b971d60c0e7b')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '5cd091f4-d593-40fc-92bc-a0cf3eba940a')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('5cd091f4-d593-40fc-92bc-a0cf3eba940a')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '1872c8cc-dc3d-4fb8-9586-b663c2119000')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('1872c8cc-dc3d-4fb8-9586-b663c2119000')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '0e87e826-e136-4faf-812b-003b0a943b5e')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('0e87e826-e136-4faf-812b-003b0a943b5e')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'df20f48b-25ca-4c4a-8f13-2ef7352deb8d')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('df20f48b-25ca-4c4a-8f13-2ef7352deb8d')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '5e482b0f-192d-41fb-beca-7e7ef613091b')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('5e482b0f-192d-41fb-beca-7e7ef613091b')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'f4e2e437-f021-4327-a5df-0cc523403af9')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('f4e2e437-f021-4327-a5df-0cc523403af9')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '6c92e556-8130-4ce0-b9db-96a6ec385eb3')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('6c92e556-8130-4ce0-b9db-96a6ec385eb3')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '44c22e2e-791e-4091-8b78-e624c28cfd7f')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('44c22e2e-791e-4091-8b78-e624c28cfd7f')

GO

GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
GO

GO
PRINT N'Update complete.';


GO
