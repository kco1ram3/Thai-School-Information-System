@using System.Web.UI.WebControls
@using TSIS.Models
@using TSIS.Classes
@model IEnumerable<iSISModel.CourseSectionAppraisal>

@{
    /*
    Html.EnableClientValidation();
    Html.EnableUnobtrusiveJavaScript();
    */
    var grid = Html.DevExpress().GridView(
        settings =>
        {
            settings.Name = "gvCourseSectionAppraisal";
            settings.KeyFieldName = "ID";
            settings.CallbackRouteValues = new { Controller = "CourseSectionAppraisal", Action = "GridViewCourseSectionAppraisal", courseSectionID = ViewData["courseSectionID"] };
            settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "CourseSectionAppraisal", Action = "GridViewCourseSectionAppraisalAddNewOrUpdate", courseSectionID = ViewData["courseSectionID"] };
            settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "CourseSectionAppraisal", Action = "GridViewCourseSectionAppraisalAddNewOrUpdate", courseSectionID = ViewData["courseSectionID"] };
            settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "CourseSectionAppraisal", Action = "GridViewCourseSectionAppraisalDelete", courseSectionID = ViewData["courseSectionID"] };
            settings.SettingsEditing.Mode = GridViewEditingMode.PopupEditForm;
            settings.SettingsBehavior.ConfirmDelete = true;
            settings.SettingsPopup.EditForm.Width = 600;
            settings.SettingsPopup.EditForm.HorizontalAlign = PopupHorizontalAlign.Center;
            settings.SettingsPopup.EditForm.VerticalAlign = PopupVerticalAlign.Middle;
            settings.Width = Unit.Percentage(100);

            settings.CommandColumn.Visible = true;
            settings.CommandColumn.ShowNewButtonInHeader = true;
            settings.CommandColumn.ShowDeleteButton = true;
            settings.CommandColumn.ShowEditButton = true;
            settings.CommandColumn.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
            settings.CommandColumn.Width = 100;

            settings.SettingsCommandButton.NewButton.Text = ModelsRepository.GetLabel("New");
            settings.SettingsCommandButton.DeleteButton.Text = ModelsRepository.GetLabel("Delete");
            settings.SettingsCommandButton.EditButton.Text = ModelsRepository.GetLabel("Edit");
            settings.SettingsCommandButton.UpdateButton.Text = ModelsRepository.GetLabel("Save");
            settings.SettingsCommandButton.CancelButton.Text = ModelsRepository.GetLabel("Cancel");
            settings.SettingsText.PopupEditFormCaption = ModelsRepository.GetLabel("CourseSectionAppraisal");
            settings.SettingsText.ConfirmDelete = ModelsRepository.GetLabel("ConfirmDelete");
            settings.SettingsText.EmptyDataRow = ModelsRepository.GetLabel("NoDataToDisplay");

            //settings.SettingsPager.Position = PagerPosition.TopAndBottom;
            settings.SettingsPager.FirstPageButton.Visible = true;
            settings.SettingsPager.LastPageButton.Visible = true;
            settings.SettingsPager.PageSizeItemSettings.Visible = true;
            settings.SettingsPager.PageSizeItemSettings.Items = new string[] { "10", "20", "50" };

            var columnNo = settings.Columns.Add("#");
            columnNo.UnboundType = DevExpress.Data.UnboundColumnType.Integer;
            columnNo.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
            columnNo.CellStyle.HorizontalAlign = HorizontalAlign.Center;
            columnNo.Settings.AllowDragDrop = DefaultBoolean.False;
            columnNo.Settings.AllowSort = DefaultBoolean.False;
            columnNo.Width = 50;
            columnNo.EditFormSettings.Visible = DefaultBoolean.False;

            settings.CustomColumnDisplayText = (sender, e) =>
            {
                if (e.Column.FieldName == "#")
                {
                    e.DisplayText = (e.VisibleRowIndex + 1).ToString();
                }
            };

            settings.Columns.Add(column =>
            {
                column.FieldName = "SeqNo";
                column.Caption = ModelsRepository.GetLabel("SeqNo");
                column.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
            });
            settings.Columns.Add(column =>
            {
                column.FieldName = "AppraisalDate";
                column.Caption = ModelsRepository.GetLabel("AppraisalDate");
                column.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
                column.CellStyle.HorizontalAlign = HorizontalAlign.Center;
                column.PropertiesEdit.DisplayFormatString = "dd/MM/yyyy";

                column.ColumnType = MVCxGridViewColumnType.DateEdit;
                var dateEditProperties = column.PropertiesEdit as DateEditProperties;
                dateEditProperties.DisplayFormatInEditMode = true;
                dateEditProperties.DisplayFormatString = "dd/MM/yyyy";
            });
            settings.Columns.Add(column =>
            {
                column.SetDataItemTemplateContent(c =>
                {
                    if ((iSISModel.MultilingualString)DataBinder.Eval(c.DataItem, "Title") != null)
                    {
                        ViewContext.Writer.Write(((iSISModel.MultilingualString)DataBinder.Eval(c.DataItem, "Title")).GetValue(CookieManager.GetCookie(HttpContext.Current, CookieManager.CookieName.CurrentLanguage)));
                    }
                });
                column.Caption = ModelsRepository.GetLabel("Title");
                column.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
            });
            settings.Columns.Add(column =>
            {
                column.SetDataItemTemplateContent(c =>
                {
                    if ((iSISModel.MultilingualString)DataBinder.Eval(c.DataItem, "Description") != null)
                    {
                        ViewContext.Writer.Write(((iSISModel.MultilingualString)DataBinder.Eval(c.DataItem, "Description")).GetValue(CookieManager.GetCookie(HttpContext.Current, CookieManager.CookieName.CurrentLanguage)));
                    }
                });
                column.Caption = ModelsRepository.GetLabel("Description");
                column.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
            });
            settings.Columns.Add(column =>
            {
                column.FieldName = "PerfectScore";
                column.Caption = ModelsRepository.GetLabel("PerfectScore");
                column.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
                column.EditFormSettings.Visible = DefaultBoolean.False;
            });
            settings.Columns.Add(column =>
            {
                column.FieldName = "AverageScore";
                column.Caption = ModelsRepository.GetLabel("AverageScore");
                column.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
                column.EditFormSettings.Visible = DefaultBoolean.False;
            });
            settings.Columns.Add(column =>
            {
                column.FieldName = "MaxScore";
                column.Caption = ModelsRepository.GetLabel("MaxScore");
                column.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
                column.EditFormSettings.Visible = DefaultBoolean.False;
            });
            settings.Columns.Add(column =>
            {
                column.FieldName = "MinScore";
                column.Caption = ModelsRepository.GetLabel("MinScore");
                column.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
                column.EditFormSettings.Visible = DefaultBoolean.False;
            });

            settings.SetEditFormTemplateContent(c =>
            {
                ViewContext.Writer.Write("<table class='dxgvEditFormTable_DevEx' style='width: 100%; margin: 0px 10px;'>");
                ViewContext.Writer.Write("<tr valign='top'>");
                ViewContext.Writer.Write("<td style='padding-top: 5px;'>");
                ViewContext.Writer.Write(ModelsRepository.GetLabel("SeqNo"));
                ViewContext.Writer.Write("</td>");
                ViewContext.Writer.Write("<td style='padding-top: 5px;'>");
                Html.DevExpress().SpinEdit(
                    s =>
                    {
                        s.Name = "SeqNo";
                        s.Properties.MinValue = 0;
                        s.Properties.MaxValue = 100;
                        //s.Width = 100;
                        s.Properties.NumberType = SpinEditNumberType.Integer;
                        s.Properties.ValidationSettings.ValidationGroup = settings.Name;
                        s.Properties.ValidationSettings.Display = Display.Dynamic;
                        s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                        s.Properties.ValidationSettings.RequiredField.IsRequired = true;
                        s.Properties.ValidationSettings.RequiredField.ErrorText = ModelsRepository.GetLabel("Required");
                        if (DataBinder.Eval(c.DataItem, "SeqNo") != null)
                        {
                            s.Number = int.Parse(DataBinder.Eval(c.DataItem, "SeqNo").ToString());
                        }
                    }
                ).GetHtml();
                ViewContext.Writer.Write("</td>");
                ViewContext.Writer.Write("<td style='padding-top: 5px;'>");
                ViewContext.Writer.Write(ModelsRepository.GetLabel("AppraisalDate"));
                ViewContext.Writer.Write("</td>");
                ViewContext.Writer.Write("<td style='padding-top: 5px;'>");
                Html.DevExpress().DateEdit(
                    s =>
                    {
                        s.Name = "AppraisalDate";
                        //s.Properties.DisplayFormatString = "dd/MM/yyyy";
                        //s.Width = 100;
                        s.Properties.ValidationSettings.ValidationGroup = settings.Name;
                        s.Properties.ValidationSettings.Display = Display.Dynamic;
                        s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                        s.Properties.ValidationSettings.RequiredField.IsRequired = true;
                        s.Properties.ValidationSettings.RequiredField.ErrorText = ModelsRepository.GetLabel("Required");
                        if (DataBinder.Eval(c.DataItem, "AppraisalDate") != null)
                        {
                            s.Date = DateTime.Parse(DataBinder.Eval(c.DataItem, "AppraisalDate").ToString());
                        }
                    }
                ).GetHtml();
                ViewContext.Writer.Write("</td>");
                ViewContext.Writer.Write("</tr>");
                ViewContext.Writer.Write("<tr valign='top'>");
                ViewContext.Writer.Write("<td style='padding-top: 5px;'>");
                ViewContext.Writer.Write(ModelsRepository.GetLabel("Title"));
                ViewContext.Writer.Write("</td>");
                ViewContext.Writer.Write("<td style='padding-top: 5px;'>");
                if ((iSISModel.MultilingualString)DataBinder.Eval(c.DataItem, "Title") == null)
                {
                    ViewContext.Writer.Write(Html.Partial("~/Views/Shared/_TextBoxMultiLanguages.cshtml", new ViewDataDictionary(this.ViewData) { { "Name", "Title" }, { "IsRequired", true }, { "ValidationGroup", settings.Name } }));
                }
                else
                {
                    ViewContext.Writer.Write(Html.Partial("~/Views/Shared/_TextBoxMultiLanguagesForModel.cshtml", (iSISModel.MultilingualString)DataBinder.Eval(c.DataItem, "Title"), new ViewDataDictionary(this.ViewData) { { "Name", "Title" }, { "IsRequired", true }, { "ValidationGroup", settings.Name } }));
                }
                ViewContext.Writer.Write("</td>");
                ViewContext.Writer.Write("<td style='padding-top: 5px;'>");
                ViewContext.Writer.Write(ModelsRepository.GetLabel("Description"));
                ViewContext.Writer.Write("</td>");
                ViewContext.Writer.Write("<td style='padding-top: 5px;'>");
                if ((iSISModel.MultilingualString)DataBinder.Eval(c.DataItem, "Description") == null)
                {
                    ViewContext.Writer.Write(Html.Partial("~/Views/Shared/_TextBoxMultiLanguages.cshtml", new ViewDataDictionary(this.ViewData) { { "Name", "Description" } }));
                }
                else
                {
                    ViewContext.Writer.Write(Html.Partial("~/Views/Shared/_TextBoxMultiLanguagesForModel.cshtml", (iSISModel.MultilingualString)DataBinder.Eval(c.DataItem, "Description"), new ViewDataDictionary(this.ViewData) { { "Name", "Description" } }));
                }
                ViewContext.Writer.Write("</td>");
                ViewContext.Writer.Write("</tr>");
                ViewContext.Writer.Write("</tr>");
                ViewContext.Writer.Write("<tr valign='top'>");
                ViewContext.Writer.Write("<td style='padding-top: 5px;'>");
                ViewContext.Writer.Write(ModelsRepository.GetLabel("PerfectScore"));
                ViewContext.Writer.Write("</td>");
                ViewContext.Writer.Write("<td style='padding-top: 5px;'>");
                Html.DevExpress().SpinEdit(
                    s =>
                    {
                        s.Name = "PerfectScore";
                        s.Properties.MinValue = 0;
                        s.Properties.MaxValue = 100;
                        s.Properties.NumberType = SpinEditNumberType.Float;
                        s.Properties.ValidationSettings.ValidationGroup = settings.Name;
                        s.Properties.ValidationSettings.Display = Display.Dynamic;
                        s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                        s.Properties.ValidationSettings.RequiredField.IsRequired = true;
                        s.Properties.ValidationSettings.RequiredField.ErrorText = ModelsRepository.GetLabel("Required");
                    }
                ).Bind(DataBinder.Eval(c.DataItem, "PerfectScore")).GetHtml();
                ViewContext.Writer.Write("</td>");
                ViewContext.Writer.Write("<td style='padding-top: 5px;'>");
                ViewContext.Writer.Write("</td>");
                ViewContext.Writer.Write("<td style='padding-top: 5px;'>");
                ViewContext.Writer.Write("</td>");
                ViewContext.Writer.Write("</tr>");
                ViewContext.Writer.Write("</table>");
                ViewContext.Writer.Write("<div style='float: right; margin: 5px;'>");
                Html.DevExpress().Button(
                    s =>
                    {
                        s.Name = "btnUpdate";
                        s.RenderMode = ButtonRenderMode.Link;
                        s.Text = ModelsRepository.GetLabel("Save");
                        s.ValidationGroup = settings.Name;
                        s.ClientSideEvents.Click = "function(s, e){ gvCourseSectionAppraisal.UpdateEdit(); }";
                    }).Render();
                Html.DevExpress().Button(
                    s =>
                    {
                        s.Name = "btnCancel";
                        s.RenderMode = ButtonRenderMode.Link;
                        s.Text = ModelsRepository.GetLabel("Cancel");
                        s.Style[HtmlTextWriterStyle.MarginLeft] = "5px";
                        s.ClientSideEvents.Click = "function(s, e){ gvCourseSectionAppraisal.CancelEdit(); }";
                    }).Render();
                ViewContext.Writer.Write("</div>");
            });

            settings.CellEditorInitialize = (s, e) =>
            {
                ASPxEdit editor = (ASPxEdit)e.Editor;
                editor.ValidationSettings.Display = Display.Dynamic;
            };
        });

    if (ViewData["EditError"] != null)
    {
        grid.SetEditErrorText((string)ViewData["EditError"]);
    }
}
@grid.Bind(Model).GetHtml()
